/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => EditorAutofocus
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var EditorAutofocus = class extends import_obsidian.Plugin {
  async onload() {
    this.registerEvent(
      this.app.workspace.on("file-open", async (file) => {
        let editor = this.getEditor();
        if (editor) {
          if (editor.lineCount() > 2) {
            return;
          }
          editor.focus();
          await sleep(100);
          let firstLine = editor.getLine(0);
          let firstCharacter = firstLine.substr(0, 1);
          if (firstCharacter != "#") {
            return;
          }
          let lineLength = firstLine.length;
          if (lineLength > 1) {
            editor.setSelection(
              { line: 0, ch: 2 },
              { line: 0, ch: lineLength }
            );
          }
        }
      })
    );
  }
  onunload() {
  }
  getEditor() {
    var _a;
    return (_a = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.editor;
  }
};
